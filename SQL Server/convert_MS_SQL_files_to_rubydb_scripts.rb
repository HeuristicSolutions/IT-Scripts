#---------------------------------------
# This script will convert the files generated by SQL Server's "generate scripts" feature
# into a format usable by rubydb.
#
# Specifically, it performs these steps:
#    1) Removes the type-specific suffix, converting for example ".View.sql" to just ".sql".
#    2) Injects the "HSP_DropObject" call at the top of the script
#    3) Copies the files into subdirectories called "\views", "\functions" and "\procedures"
#
# To use, just copy this into the folder containing the SQL Server output and run it from the command line.
#---------------------------------------


require 'fileutils'
require 'tempfile'

#---------------------------
# Functions
#---------------------------

def isView(fname)
	return (fname =~ /\.View\.sql/i)
end

def copyView(fname)
	newPath = "views\\" + fname.sub(/\.View\.sql/i, ".sql")
	FileUtils.cp(fname, newPath)
	addDropStatementToFile(newPath)
end

def isFunction(fname)
	return (fname =~ /\.UserDefinedFunction\.sql/i)
end

def copyFunction(fname)
	newPath = "functions\\" + fname.sub(/\.UserDefinedFunction\.sql/i, ".sql")
	FileUtils.cp(fname, newPath)
	addDropStatementToFile(newPath)
end

def isStoredProc(fname)
	return (fname =~ /\.StoredProcedure\.sql/i)
end

def copyStoredProc(fname)
	newPath = "procedures\\" + fname.sub(/\.StoredProcedure\.sql/i, ".sql")
	FileUtils.cp(fname, newPath)
	addDropStatementToFile(newPath)
end

def addDropStatementToFile(fpath) 
	# Get the object name by removing the path info and trimming file ext
	# TODO: this strips the schema/owner portions [e.g. "dbo."] and may need
	# updated if we run this with schema qualified file names
	objectName = fpath[/[-_a-zA-Z0-9]+\.sql$/i].sub(/\.sql$/i, "")
	
	File.prepend(fpath, "Execute HSP_DropObject '#{objectName}'\nGO\n\n")
end

class File
  def self.prepend(path, string)
    Tempfile.open File.basename(path) do |tempfile|
      # prepend data to tempfile
      tempfile << string

      File.open(path, 'r+') do |file|
        # append original data to tempfile
        tempfile << file.read
        # reset file positions
        file.pos = tempfile.pos = 0
        # copy all data back to original file
        file << tempfile.read
      end
    end
  end
end

#---------------------------
# Program flow
#---------------------------

FileUtils.rm_rf "views" if File.directory?("views")
FileUtils.rm_rf "functions" if File.directory?("functions")
FileUtils.rm_rf "procedures" if File.directory?("procedures")

# HACK: Weird file locking errors if we try and recreate right away. 
sleep 1

Dir.mkdir("views")
Dir.mkdir("functions")
Dir.mkdir("procedures")

# Loop over the files and copy them to their respective destinations
Dir.foreach(".") do | fname |
	if isView(fname) 
		copyView(fname)

	elsif isFunction(fname) 
		copyFunction(fname)

	elsif isStoredProc(fname) 
		copyStoredProc(fname)

	end
end

